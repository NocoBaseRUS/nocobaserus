name: Manual merge

concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: true

on:
  push:
    branches:
      - chore/ci-next-to-main
  workflow_dispatch:

jobs:
  get-plugins:
    uses: nocobase/nocobase/.github/workflows/get-plugins.yml@main
    secrets: inherit
  merge-release:
    runs-on: ubuntu-latest
    needs: get-plugins
    steps:
      - name: Get info
        id: get-info
        run: |
          # if [[ "${{ github.head_ref || github.ref_name }}" == "next" ]]; then
            echo "proRepos=$(echo '${{ needs.get-plugins.outputs.beta-plugins }}')" >> $GITHUB_OUTPUT
            echo "baseBranch=$(echo 'next')" >> $GITHUB_OUTPUT
            echo "targetBranch=$(echo 'main')" >> $GITHUB_OUTPUT
          # elif [[ "${{ github.head_ref || github.ref_name }}" == "develop" ]]; then
          #   echo "proRepos=$(echo '${{ needs.get-plugins.outputs.alpha-plugins }}')" >> $GITHUB_OUTPUT
          #   echo "baseBranch=$(echo 'develop')" >> $GITHUB_OUTPUT
          #   echo "targetBranch=$(echo 'next')" >> $GITHUB_OUTPUT
          # else
          #   exit 1
          # fi
      - uses: actions/create-github-app-token@v1
        id: app-token
        with:
          app-id: ${{ vars.NOCOBASE_APP_ID }}
          private-key: ${{ secrets.NOCOBASE_APP_PRIVATE_KEY }}
          repositories: nocobase,pro-plugins,${{ join(fromJSON(steps.get-info.outputs.proRepos), ',') }},${{ join(fromJSON(needs.get-plugins.outputs.custom-plugins), ',') }}
          skip-token-revoke: true
      - name: Get GitHub App User ID
        id: get-user-id
        run: echo "user-id=$(gh api "/users/${{ steps.app-token.outputs.app-slug }}[bot]" --jq .id)" >> "$GITHUB_OUTPUT"
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token }}
      - name: Checkout
        uses: actions/checkout@v4
        with:
          repository: nocobase/nocobase
          token: ${{ steps.app-token.outputs.token }}
          persist-credentials: true
          fetch-depth: 0
      - name: Checkout pro-plugins
        uses: actions/checkout@v4
        with:
          repository: nocobase/pro-plugins
          path: packages/pro-plugins
          fetch-depth: 0
          token: ${{ steps.app-token.outputs.token }}
          persist-credentials: true
      - name: Clone pro repos
        shell: bash
        run: |
          for repo in ${{ join(fromJSON(steps.get-info.outputs.proRepos), ' ') }} ${{ join(fromJSON(needs.get-plugins.outputs.custom-plugins), ' ') }}
          do
          git clone https://x-access-token:${{ steps.app-token.outputs.token }}@github.com/nocobase/$repo.git packages/pro-plugins/@nocobase/$repo
          done
      - name: Set up git
        shell: bash
        run: |
          git config --global user.name '${{ steps.app-token.outputs.app-slug }}[bot]'
          git config --global user.email '${{ steps.get-user-id.outputs.user-id }}+${{ steps.app-token.outputs.app-slug }}[bot]@users.noreply.github.com>'
          echo "pro-plugins" >> .git/info/exclude
          cd ./packages/pro-plugins
          git checkout main
          for repo in ${{ join(fromJSON(steps.get-info.outputs.proRepos), ' ') }} ${{ join(fromJSON(needs.get-plugins.outputs.custom-plugins), ' ') }}
          do
            echo "@nocobase/$repo" >> .git/info/exclude
          done
          cd ./../..
      - name: Merge ${{ steps.get-info.outputs.targetBranch }} into ${{ steps.get-info.outputs.baseBranch }}
        shell: bash
        run: |
          for repo in ${{ join(fromJSON(steps.get-info.outputs.proRepos), ' ') }} ${{ join(fromJSON(needs.get-plugins.outputs.custom-plugins), ' ') }}
          do
            cd ./packages/pro-plugins/@nocobase/$repo
            git checkout ${{ steps.get-info.outputs.targetBranch }}
            git pull origin ${{ steps.get-info.outputs.targetBranch }}
            git checkout ${{ steps.get-info.outputs.baseBranch }}
            git pull origin ${{ steps.get-info.outputs.baseBranch }}
            git merge ${{ steps.get-info.outputs.targetBranch }}
            cd ../../../../
          done
          cd ./packages/pro-plugins
          git checkout ${{ steps.get-info.outputs.targetBranch }}
          git pull origin ${{ steps.get-info.outputs.targetBranch }}
          git checkout ${{ steps.get-info.outputs.baseBranch }}
          git pull origin ${{ steps.get-info.outputs.baseBranch }}
          git merge ${{ steps.get-info.outputs.targetBranch }}
          cd ../../
          git checkout ${{ steps.get-info.outputs.targetBranch }}
          git pull origin ${{ steps.get-info.outputs.targetBranch }}
          git checkout ${{ steps.get-info.outputs.baseBranch }}
          git pull origin ${{ steps.get-info.outputs.baseBranch }}
          git merge ${{ steps.get-info.outputs.targetBranch }}
      - name: Merge ${{ steps.get-info.outputs.baseBranch }} into ${{ steps.get-info.outputs.targetBranch }}
        shell: bash
        run: |
          for repo in ${{ join(fromJSON(steps.get-info.outputs.proRepos), ' ') }} ${{ join(fromJSON(needs.get-plugins.outputs.custom-plugins), ' ') }}
          do
            cd ./packages/pro-plugins/@nocobase/$repo
            git checkout ${{ steps.get-info.outputs.targetBranch }}
            git merge ${{ steps.get-info.outputs.baseBranch }}
            cd ../../../../
          done
          cd ./packages/pro-plugins
          git checkout ${{ steps.get-info.outputs.targetBranch }}
          git merge ${{ steps.get-info.outputs.baseBranch }}
          cd ../../
          git checkout ${{ steps.get-info.outputs.targetBranch }}
          git merge ${{ steps.get-info.outputs.baseBranch }}
      # - name: Push
      #   shell: bash
      #   run: |
      #     for repo in ${{ join(fromJSON(vars.NEXT_PRO_PLUGIN_REPOS), ' ') }} ${{ join(fromJSON(vars.CUSTOM_PRO_PLUGIN_REPOS), ' ') }}
      #     do
      #       cd ./packages/pro-plugins/@nocobase/$repo
      #       git push origin ${{ steps.get-info.outputs.targetBranch }} --atomic --tags
      #       cd ../../../../
      #     done
      #     cd ./packages/pro-plugins
      #     git push origin ${{ steps.get-info.outputs.targetBranch }} --atomic --tags
      #     cd ../../
      #     git push origin ${{ steps.get-info.outputs.targetBranch }} --atomic --tags
